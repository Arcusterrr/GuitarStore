{"version":3,"sources":["config.js","configuration/dataProvider/AdminHttpClient.ts","configuration/dataProvider/index.ts","authProvider.ts","pages/LoginForm.tsx","static/theme.ts","entities/users/UsersList.tsx","entities/users/UserShow.tsx","entities/guitars/GuitarList.tsx","entities/guitars/GuitarShow.tsx","entities/guitars/GuitarCreate.tsx","entities/guitars/GuitarEdit.tsx","entities/guitarType/GuitarTypeList.tsx","entities/guitarType/GuitarTypeEdit.tsx","entities/guitarType/GuitarTypeCreate.tsx","entities/orders/OrderList.tsx","entities/orders/OrderShow.tsx","Layout/Menu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AdminHttpClient","url","options","headers","Headers","token","localStorage","getItem","set","fetchUtils","fetchJson","myDataProvider","jsonServerProvider","config","dataProvider","create","resource","params","console","log","formData","FormData","append","data","name","description","rating","count","cost","guitarTypeId","image","rawFile","files","forEach","x","method","body","then","json","id","update","login","username","password","captchaResult","request","Request","JSON","stringify","fetch","response","status","Error","accessToken","roles","setAuthData","logout","clearAuthData","Promise","resolve","checkError","error","reject","checkAuth","getToken","getPermissions","parse","removeItem","permissions","setItem","useStyles","makeStyles","theme","form","padding","input","marginTop","button","width","icon","marginRight","spacing","Input","meta","touched","inputProps","props","TextField","helperText","fullWidth","recaptchaRef","React","LoginForm","useSafeSetState","loading","setLoading","useLogin","translate","useTranslate","notify","useNotify","classes","onSubmit","values","catch","message","validate","errors","undefined","render","handleSubmit","e","preventDefault","current","execute","noValidate","className","autoFocus","component","label","disabled","type","autoComplete","reset","ref","size","sitekey","onChange","val","CardActions","Button","variant","color","CircularProgress","thickness","createMuiTheme","palette","primary","indigo","secondary","blue","UserList","List","title","sort","field","order","Datagrid","rowClick","isRowSelectable","source","DateField","UserShow","Show","SimpleShowLayout","GuitarList","FunctionField","height","style","objectFit","objectPosition","src","img","GuitarShow","ReferenceField","reference","detailedImages","map","GuitarCreate","Create","SimpleForm","TextInput","required","minValue","maxValue","ReferenceInput","AutocompleteInput","optionText","ImageInput","multiple","PreviewImage","record","ImageField","GuitarEdit","Edit","GuitarTypeList","GuitarTypeEdit","GuitarTypeCreate","OrderList","cartItems","reduce","accumulator","item","guitar","OrderShow","ArrayField","to","Menu","onMenuClick","dense","useState","diseas","isXSmall","useMediaQuery","breakpoints","down","open","useSelector","state","admin","ui","sidebarOpen","includes","Box","mt","MenuItemLink","primaryText","onClick","sidebarIsOpen","leftIcon","russianMessages","require","i18nProvider","polyglotI18nProvider","LoginPage","Login","Fragment","App","Admin","authProvider","loginPage","menu","Resource","list","show","PostIcon","edit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9f889048.chunk.js","sourcesContent":["export default {\r\n  baseApiUrl: \"/admin/api/v1\",\r\n  authUrl: \"/admin/api/v1/account/signIn\",\r\n  captchaKey: \"6Ld6decaAAAAAEKI7xRO7U__e-FFjrB8febEm1vR\",\r\n};\r\n","/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-prototype-builtins */\r\nimport { fetchUtils } from \"react-admin\";\r\n\r\nexport function AdminHttpClient(url: string, options: any = {}): any {\r\n  if (!options.headers) options.headers = new Headers();\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n  options.headers.set(\"Authorization\", `Bearer ${token}`);\r\n\r\n  return fetchUtils.fetchJson(url, options);\r\n}\r\n","// Core\r\nimport jsonServerProvider from \"ra-data-json-server\";\r\n\r\n// Components\r\nimport config from \"../../config\";\r\nimport { AdminHttpClient } from \"./AdminHttpClient\";\r\n\r\nconst myDataProvider = jsonServerProvider(config.baseApiUrl, AdminHttpClient);\r\nexport const dataProvider = {\r\n  ...myDataProvider,\r\n  create: (resource: any, params: any) => {\r\n    console.log(resource);\r\n\r\n    if (resource !== \"guitars\") {\r\n      return myDataProvider.create(resource, params);\r\n    }\r\n\r\n    let formData = new FormData();\r\n\r\n    formData.append(\"name\", params.data.name);\r\n    formData.append(\"description\", params.data.description);\r\n    formData.append(\"rating\", params.data.rating);\r\n    formData.append(\"count\", params.data.count);\r\n    formData.append(\"cost\", params.data.cost);\r\n    formData.append(\"guitarTypeId\", params.data.guitarTypeId);\r\n    formData.append(\"image\", params.data.image.rawFile);\r\n    params.data.files.forEach((x: any) => formData.append(\"files\", x.rawFile));\r\n\r\n    return AdminHttpClient(`${config.baseApiUrl}/${resource}`, {\r\n      method: \"POST\",\r\n      body: formData,\r\n    }).then(({ json }: any) => ({\r\n      data: { ...params.data, id: json.id },\r\n    }));\r\n  },\r\n  update: (resource: any, params: any) => {\r\n    if (resource !== \"guitars\") {\r\n      return myDataProvider.update(resource, params);\r\n    }\r\n\r\n    let formData = new FormData();\r\n\r\n    formData.append(\"name\", params.data.name);\r\n    formData.append(\"description\", params.data.description);\r\n    formData.append(\"rating\", params.data.rating);\r\n    formData.append(\"count\", params.data.count);\r\n    formData.append(\"cost\", params.data.cost);\r\n    formData.append(\"guitarTypeId\", params.data.guitarTypeId);\r\n    formData.append(\"image\", params.data.image.rawFile);\r\n    params.data.files?.forEach((x: any) => formData.append(\"files\", x.rawFile));\r\n\r\n    return AdminHttpClient(`${config.baseApiUrl}/${resource}/${params.id}`, {\r\n      method: \"PUT\",\r\n      body: formData,\r\n    }).then(({ json }: any) => ({\r\n      data: { ...params.data, id: json.id },\r\n    }));\r\n  },\r\n};\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport config from \"./config\";\r\n\r\nexport default {\r\n    login: ({ username, password, captchaResult }: { username: string, password: string, captchaResult: string }) => {\r\n        const request = new Request(config.authUrl, {\r\n            method: 'POST',\r\n            body: JSON.stringify({ username, password }),\r\n            headers: new Headers({ 'Content-Type': 'application/json', 'CaptchaResponse': captchaResult }),\r\n        });\r\n        return fetch(request)\r\n            .then(response => {\r\n                if (response.status < 200 || response.status >= 300) {\r\n                    throw new Error('Неправильный логин или пароль');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(({ data: { accessToken, roles } }) => {\r\n                setAuthData(accessToken, roles);\r\n            });\r\n    },\r\n    logout: () => {\r\n        clearAuthData();\r\n        return Promise.resolve();\r\n    },\r\n    checkError: (error: any) => {\r\n        const status = error.status;\r\n        if (status === 401 || status === 403) {\r\n            clearAuthData();\r\n            return Promise.reject();\r\n        }\r\n        return Promise.resolve();\r\n    },\r\n    checkAuth: () => {\r\n        return getToken() ? Promise.resolve() : Promise.reject();\r\n    },\r\n    getPermissions: () => {\r\n        const roles = getPermissions();\r\n        return roles ? Promise.resolve(JSON.parse(roles)) : Promise.resolve([]);\r\n    }\r\n};\r\n\r\nconst getToken = () => localStorage.getItem('token');\r\nconst getPermissions = () => localStorage.getItem('permissions');\r\n\r\nconst clearAuthData = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('permissions');\r\n}\r\n\r\nconst setAuthData = (token: string, permissions: string[]) => {\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('permissions', JSON.stringify(permissions));\r\n}\r\n","/* eslint-disable */\r\n\r\nimport * as React from 'react';\r\nimport { FunctionComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Field, Form } from 'react-final-form';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { useTranslate, useLogin, useNotify, useSafeSetState, LoginComponent } from 'ra-core';\r\nimport ReCAPTCHA from 'react-google-recaptcha';\r\nimport config from '../config';\r\n\r\ninterface FormData {\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\nconst useStyles = makeStyles(\r\n    (theme: Theme) => ({\r\n        form: {\r\n            padding: '0 1em 1em 1em',\r\n        },\r\n        input: {\r\n            marginTop: '1em',\r\n        },\r\n        button: {\r\n            width: '100%',\r\n        },\r\n        icon: {\r\n            marginRight: theme.spacing(1),\r\n        },\r\n    }),\r\n    { name: 'RaLoginForm' }\r\n);\r\n\r\nconst Input = ({\r\n    meta: { touched, error },\r\n    input: inputProps,\r\n    ...props\r\n}: {meta: any, input: any}) => (\r\n        <TextField\r\n            error={!!(touched && error)}\r\n            helperText={touched && error}\r\n            {...inputProps}\r\n            {...props}\r\n            fullWidth\r\n        />\r\n    );\r\n\r\nconst recaptchaRef: any = React.createRef();\r\n\r\nconst Captcha = (onSubmit: any) => (props: any) => (\r\n    <ReCAPTCHA\r\n        ref={recaptchaRef}\r\n        size=\"invisible\"\r\n        sitekey={config.captchaKey}\r\n        onChange={(val: any) => {\r\n            props.input.onChange(val);\r\n            onSubmit();\r\n        }}\r\n    />\r\n);\r\n\r\nconst LoginForm: LoginComponent = props => {\r\n    const [loading, setLoading] = useSafeSetState(false);\r\n    const login = useLogin();\r\n    const translate = useTranslate();\r\n    const notify = useNotify();\r\n    const classes = useStyles(props);\r\n\r\n    const validate = (values: FormData) => {\r\n        const errors: { username?: string, password?: string } = { username: undefined, password: undefined };\r\n\r\n        if (!values.username) {\r\n            errors.username = translate('ra.validation.required');\r\n        }\r\n        if (!values.password) {\r\n            errors.password = translate('ra.validation.required');\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    const submit = (values: any) => {\r\n        setLoading(true);\r\n        login(values)\r\n            .then(() => {\r\n                setLoading(false);\r\n            })\r\n            .catch(error => {\r\n                setLoading(false);\r\n                notify(\r\n                    typeof error === 'string'\r\n                        ? error\r\n                        : typeof error === 'undefined' || !error.message\r\n                            ? 'ra.auth.sign_in_error'\r\n                            : error.message,\r\n                    'warning'\r\n                );\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Form\r\n                onSubmit={submit}\r\n                validate={validate}\r\n                render={({ handleSubmit }) => (\r\n                    <form onSubmit={(e: any) => {\r\n                        e.preventDefault();\r\n                        recaptchaRef.current.execute();\r\n                    }} noValidate>\r\n                        <div className={classes.form}>\r\n                            <div className={classes.input}>\r\n                                <Field\r\n                                    autoFocus\r\n                                    id=\"username\"\r\n                                    name=\"username\"\r\n                                    component={Input}\r\n                                    label={translate('ra.auth.username')}\r\n                                    disabled={loading}\r\n                                />\r\n                            </div>\r\n                            <div className={classes.input}>\r\n                                <Field\r\n                                    id=\"password\"\r\n                                    name=\"password\"\r\n                                    component={Input}\r\n                                    label={translate('ra.auth.password')}\r\n                                    type=\"password\"\r\n                                    disabled={loading}\r\n                                    autoComplete=\"current-password\"\r\n                                />\r\n                            </div>\r\n                            <Field name='captchaResult' component={Captcha(() => {\r\n                                handleSubmit();\r\n                                recaptchaRef.current.reset();\r\n                            })}/>\r\n                        </div>\r\n                        <CardActions>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                type=\"submit\"\r\n                                color=\"primary\"\r\n                                disabled={loading}\r\n                                className={classes.button}\r\n                            >\r\n                                {loading && (\r\n                                    <CircularProgress\r\n                                        className={classes.icon}\r\n                                        size={18}\r\n                                        thickness={2}\r\n                                    />\r\n                                )}\r\n                                {translate('ra.auth.sign_in')}\r\n                            </Button>\r\n                        </CardActions>\r\n                    </form>\r\n                )}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import indigo from '@material-ui/core/colors/indigo';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    primary: indigo,\r\n    secondary: blue\r\n  },\r\n});","import React from \"react\";\r\nimport {\r\n  Datagrid,\r\n  List,\r\n  TextField,\r\n  FunctionField,\r\n  DateField,\r\n} from \"react-admin\";\r\n\r\nexport const UserList: React.FC = (props) => {\r\n  return (\r\n    <List\r\n      {...props}\r\n      title='Список пользователей'\r\n      sort={{ field: \"registrationDate\", order: \"DESC\" }}\r\n    >\r\n      <Datagrid rowClick='show' isRowSelectable={() => false}>\r\n        <TextField label='Имя пользователя' source='userName' />\r\n        <DateField label='Дата регистрации' source='registrationDate' />\r\n      </Datagrid>\r\n    </List>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  SimpleShowLayout,\r\n  Show,\r\n  TextField,\r\n  FunctionField,\r\n  DateField,\r\n} from \"react-admin\";\r\n\r\nexport const UserShow: React.FC = (props) => {\r\n  return (\r\n    <Show {...props}>\r\n      <SimpleShowLayout>\r\n        <TextField label='Логин' source='userName' />\r\n        <DateField label='Дата регистрации' source='registrationDate' />\r\n      </SimpleShowLayout>\r\n    </Show>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Datagrid,\r\n  List,\r\n  TextField,\r\n  FunctionField,\r\n  DateField,\r\n} from \"react-admin\";\r\n\r\nexport const GuitarList: React.FC = (props) => {\r\n  return (\r\n    <List\r\n      {...props}\r\n      title='Список гитар'\r\n      sort={{ field: \"dateCreated\", order: \"DESC\" }}\r\n    >\r\n      <Datagrid rowClick='show' isRowSelectable={() => false}>\r\n        <TextField label='Название' source='name' />\r\n        <DateField label='Дата создания' source='dateCreated' />\r\n        <FunctionField\r\n          render={(data: any) => (\r\n            <img\r\n              height={300}\r\n              style={{ objectFit: \"cover\", objectPosition: \"center\" }}\r\n              width={300}\r\n              src={data.img}\r\n            />\r\n          )}\r\n        />\r\n      </Datagrid>\r\n    </List>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  SimpleShowLayout,\r\n  Show,\r\n  TextField,\r\n  FunctionField,\r\n  DateField,\r\n  ReferenceField,\r\n} from \"react-admin\";\r\n\r\nexport const GuitarShow: React.FC = (props) => {\r\n  return (\r\n    <Show {...props}>\r\n      <SimpleShowLayout>\r\n        <TextField label='Название' source='name' />\r\n        <TextField label='Описание' source='description' />\r\n        <TextField label='Цена' source='cost' />\r\n        <TextField label='Количество' source='count' />\r\n        <TextField label='Рейтинг' source='rating' />\r\n        <ReferenceField\r\n          label='Тип гитары'\r\n          source='guitarTypeId'\r\n          reference='guitartypes'\r\n        >\r\n          <TextField source='name' />\r\n        </ReferenceField>\r\n        <DateField label='Дата регистрации' source='dateCreated' />\r\n        <FunctionField\r\n          label='Фото'\r\n          render={(data: any) => <img width={300} src={data.img} />}\r\n        />\r\n        <FunctionField\r\n          label='Детальные фото'\r\n          render={(data: any) => (\r\n            <>\r\n              {data.detailedImages.map((x: any) => (\r\n                <img width={300} src={x} />\r\n              ))}\r\n            </>\r\n          )}\r\n        />\r\n      </SimpleShowLayout>\r\n    </Show>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport {\r\n  Create,\r\n  TextInput,\r\n  SimpleForm,\r\n  required,\r\n  ImageInput,\r\n  ImageField,\r\n  ReferenceInput,\r\n  AutocompleteInput,\r\n  minValue,\r\n  maxValue,\r\n} from \"react-admin\";\r\n\r\nexport const GuitarCreate: React.FC = (props) => {\r\n  return (\r\n    <Create {...props}>\r\n      <SimpleForm>\r\n        <TextInput label='Название' source='name' validate={required()} />\r\n        <TextInput\r\n          label='Описание'\r\n          source='description'\r\n          validate={required()}\r\n        />\r\n        <TextInput\r\n          label='Цена'\r\n          source='cost'\r\n          validate={[required(), minValue(1), maxValue(3000000)]}\r\n        />\r\n        <TextInput\r\n          label='Количество'\r\n          source='count'\r\n          validate={[required(), minValue(1), maxValue(100)]}\r\n        />\r\n        <TextInput\r\n          label='Рейтинг'\r\n          source='rating'\r\n          validate={[required(), minValue(0), maxValue(10)]}\r\n        />\r\n        <ReferenceInput\r\n          label='Тип гитары'\r\n          source='guitarTypeId'\r\n          reference='guitartypes'\r\n          validate={required()}\r\n        >\r\n          <AutocompleteInput optionText='name' />\r\n        </ReferenceInput>\r\n        <ImageInput\r\n          source='image'\r\n          label='Картинка'\r\n          multiple={false}\r\n          validate={required()}\r\n        >\r\n          <PreviewImage source='src' />\r\n        </ImageInput>\r\n        <ImageInput\r\n          source='files'\r\n          label='Детальные картинки'\r\n          validate={required()}\r\n          multiple\r\n        >\r\n          <PreviewImage source='src' />\r\n        </ImageInput>\r\n      </SimpleForm>\r\n    </Create>\r\n  );\r\n};\r\n\r\nconst PreviewImage: FC<any> = ({ record, source }) => {\r\n  if (typeof record == \"string\") {\r\n    record = {\r\n      [source]: record,\r\n    };\r\n  }\r\n  return <ImageField record={record} source={source} />;\r\n};\r\n","import React, { FC } from \"react\";\r\nimport {\r\n  Edit,\r\n  TextInput,\r\n  SimpleForm,\r\n  required,\r\n  ImageInput,\r\n  ImageField,\r\n  ReferenceInput,\r\n  AutocompleteInput,\r\n  minValue,\r\n  maxValue,\r\n} from \"react-admin\";\r\n\r\nexport const GuitarEdit: React.FC = (props) => {\r\n  return (\r\n    <Edit {...props}>\r\n      <SimpleForm>\r\n        <TextInput label='Название' source='name' validate={required()} />\r\n        <TextInput\r\n          label='Описание'\r\n          source='description'\r\n          validate={required()}\r\n        />\r\n        <TextInput\r\n          label='Цена'\r\n          source='cost'\r\n          validate={[required(), minValue(1), maxValue(3000000)]}\r\n        />\r\n        <TextInput\r\n          label='Количество'\r\n          source='count'\r\n          validate={[required(), minValue(1), maxValue(100)]}\r\n        />\r\n        <TextInput\r\n          label='Рейтинг'\r\n          source='rating'\r\n          validate={[required(), minValue(0), maxValue(10)]}\r\n        />\r\n        <ReferenceInput\r\n          label='Тип гитары'\r\n          source='guitarTypeId'\r\n          reference='guitartypes'\r\n          validate={required()}\r\n        >\r\n          <AutocompleteInput optionText='name' />\r\n        </ReferenceInput>\r\n        <ImageInput source='image' label='Картинка' multiple={false}>\r\n          <PreviewImage source='src' />\r\n        </ImageInput>\r\n        <ImageInput\r\n          source='files'\r\n          label='Детальные картинки'\r\n          validate={required()}\r\n          multiple\r\n        >\r\n          <PreviewImage source='src' />\r\n        </ImageInput>\r\n      </SimpleForm>\r\n    </Edit>\r\n  );\r\n};\r\n\r\nconst PreviewImage: FC<any> = ({ record, source }) => {\r\n  if (typeof record == \"string\") {\r\n    record = {\r\n      [source]: record,\r\n    };\r\n  }\r\n  return <ImageField record={record} source={source} />;\r\n};\r\n","import React from \"react\";\r\nimport { Datagrid, List, TextField, FunctionField } from \"react-admin\";\r\n\r\nexport const GuitarTypeList: React.FC = (props) => {\r\n  return (\r\n    <List {...props} title='Список типов гитар'>\r\n      <Datagrid rowClick='edit' isRowSelectable={() => false}>\r\n        <TextField label='Название' source='name' />\r\n        <FunctionField render={(data: any) => <img src={data.img} />} />\r\n      </Datagrid>\r\n    </List>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Edit, TextInput, required, SimpleForm } from \"react-admin\";\r\n\r\nexport const GuitarTypeEdit: React.FC = (props) => {\r\n  return (\r\n    <Edit {...props}>\r\n      <SimpleForm>\r\n        <TextInput validate={required()} label='Название' source='name' />\r\n      </SimpleForm>\r\n    </Edit>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Create, TextInput, required, SimpleForm } from \"react-admin\";\r\n\r\nexport const GuitarTypeCreate: React.FC = (props) => {\r\n  return (\r\n    <Create {...props}>\r\n      <SimpleForm>\r\n        <TextInput validate={required()} label='Название' source='name' />\r\n      </SimpleForm>\r\n    </Create>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  SimpleShowLayout,\r\n  Show,\r\n  TextField,\r\n  FunctionField,\r\n  ReferenceField,\r\n  DateField,\r\n  List,\r\n  Datagrid,\r\n} from \"react-admin\";\r\n\r\nexport const OrderList: React.FC = (props) => {\r\n  return (\r\n    <List {...props} sort={{ field: \"orderDate\", order: \"DESC\" }}>\r\n      <Datagrid>\r\n        <ReferenceField label='Пользователь' source='userId' reference='users'>\r\n          <TextField source='userName' />\r\n        </ReferenceField>\r\n        <DateField label='Дата покупки' source='orderDate' />\r\n        <FunctionField\r\n          label='Цена'\r\n          render={(data: any) =>\r\n            data.cartItems.reduce(\r\n              (accumulator: number, item: any) => {\r\n                return accumulator + item.guitar.cost\r\n              }\r\n            , 0) + \" руб.\"\r\n          }\r\n        />\r\n      </Datagrid>\r\n    </List>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  SimpleShowLayout,\r\n  Show,\r\n  TextField,\r\n  FunctionField,\r\n  ReferenceField,\r\n  ArrayField,\r\n  Datagrid,\r\n  DateField,\r\n} from \"react-admin\";\r\n\r\nexport const OrderShow: React.FC = (props) => {\r\n  return (\r\n    <Show {...props}>\r\n      <SimpleShowLayout>\r\n        <ReferenceField label='Пользователь' source='userId' reference='users'>\r\n          <TextField source='userName' />\r\n        </ReferenceField>\r\n        <DateField label='Дата покупки' source='orderDate' />\r\n        <FunctionField\r\n          label='Цена'\r\n          render={(data: any) =>\r\n            data.cartItems.reduce(\r\n              (accumulator: number, item: any) =>\r\n                accumulator + item.count * item.guitar.cost\r\n            ) + \" руб.\"\r\n          }\r\n        />\r\n        <ArrayField source='cartItems' label='Корзина'>\r\n          <Datagrid>\r\n            <TextField source='guitarCount' label='Количество гитар' />\r\n            <FunctionField\r\n              label='Название'\r\n              render={(data: any) => data.guitar.name}\r\n            />\r\n            <FunctionField\r\n              label='Цена'\r\n              render={(data: any) => data.guitar.cost + \" руб.\"}\r\n            />\r\n\r\n            <FunctionField\r\n              label='Просмотр'\r\n              render={(data: any) => (\r\n                <Link to={\"/guitars/\" + data.guitar.id + \"/show\"}>\r\n                  Посмотреть\r\n                </Link>\r\n              )}\r\n            />\r\n          </Datagrid>\r\n        </ArrayField>\r\n      </SimpleShowLayout>\r\n    </Show>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useMediaQuery, Box } from \"@material-ui/core\";\r\nimport MapIcon from \"@material-ui/icons/Map\";\r\nimport { MenuItemLink } from \"react-admin\";\r\n\r\nconst Menu: React.FC<any> = ({ onMenuClick, logout, dense = false }) => {\r\n  const [state, setState] = useState<{ [p: string]: boolean }>({\r\n    diseas: true,\r\n  });\r\n  const isXSmall = useMediaQuery((theme: any) => theme.breakpoints.down(\"xs\"));\r\n  const open = useSelector((state: any) => state.admin.ui.sidebarOpen);\r\n  useSelector((state: any) => state.theme); // force rerender on theme change\r\n\r\n  const handleToggle = (menu: string) => {\r\n    setState((state) => ({ ...state, [menu]: !state[menu] }));\r\n  };\r\n\r\n  const item = localStorage.getItem(\"permissions\");\r\n  const permissions: string[] | undefined = item && JSON.parse(item);\r\n\r\n  const admin = permissions?.includes(\"Admin\");\r\n\r\n  return (\r\n    <Box mt={1}>\r\n      <MenuItemLink\r\n        to={`/users`}\r\n        primaryText={\"Пользователи\"}\r\n        onClick={onMenuClick}\r\n        sidebarIsOpen={open}\r\n        dense={dense}\r\n        leftIcon={<MapIcon />}\r\n      />\r\n      <MenuItemLink\r\n        to={`/guitars`}\r\n        primaryText={\"Гитары\"}\r\n        onClick={onMenuClick}\r\n        sidebarIsOpen={open}\r\n        dense={dense}\r\n        leftIcon={<MapIcon />}\r\n      />\r\n      <MenuItemLink\r\n        to={`/guitartypes`}\r\n        primaryText={\"Типы гитар\"}\r\n        onClick={onMenuClick}\r\n        sidebarIsOpen={open}\r\n        dense={dense}\r\n        leftIcon={<MapIcon />}\r\n      />\r\n      <MenuItemLink\r\n        to={`/orders`}\r\n        primaryText={\"Заказы\"}\r\n        onClick={onMenuClick}\r\n        sidebarIsOpen={open}\r\n        dense={dense}\r\n        leftIcon={<MapIcon />}\r\n      />\r\n      {isXSmall && logout}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React from \"react\";\r\nimport { Admin, Resource, Login } from \"react-admin\";\r\nimport PostIcon from \"@material-ui/icons/Book\";\r\nimport polyglotI18nProvider from \"ra-i18n-polyglot\";\r\n\r\nimport { dataProvider } from \"./configuration\";\r\n\r\nimport authProvider from \"./authProvider\";\r\nimport LoginForm from \"./pages/LoginForm\";\r\n\r\nimport \"./App.css\";\r\nimport { theme } from \"./static/theme\";\r\n\r\nimport { UserList, UserShow } from \"./entities/users\";\r\nimport {\r\n  GuitarList,\r\n  GuitarShow,\r\n  GuitarCreate,\r\n  GuitarEdit,\r\n} from \"./entities/guitars\";\r\nimport {\r\n  GuitarTypeEdit,\r\n  GuitarTypeList,\r\n  GuitarTypeCreate,\r\n} from \"./entities/guitarType\";\r\nimport { OrderList, OrderShow } from \"./entities/orders\";\r\n\r\nimport { Menu } from \"./Layout\";\r\n\r\nconst russianMessages = require(\"ra-language-russian\");\r\n\r\nconst i18nProvider = polyglotI18nProvider(() => russianMessages, \"ru\");\r\n\r\nconst LoginPage = (props: any) => {\r\n  return (\r\n    <Login {...props}>\r\n      <React.Fragment>\r\n        <LoginForm {...props} />\r\n      </React.Fragment>\r\n    </Login>\r\n  );\r\n};\r\n\r\nexport default function App() {\r\n  return (\r\n    <Admin\r\n      theme={theme}\r\n      dataProvider={dataProvider}\r\n      i18nProvider={i18nProvider}\r\n      authProvider={authProvider}\r\n      loginPage={LoginPage}\r\n      menu={Menu}\r\n    >\r\n      <Resource\r\n        name='users'\r\n        list={UserList}\r\n        show={UserShow}\r\n        icon={PostIcon}\r\n        options={{\r\n          label: \"Пользователи\",\r\n        }}\r\n      />\r\n      <Resource\r\n        name='guitars'\r\n        list={GuitarList}\r\n        show={GuitarShow}\r\n        create={GuitarCreate}\r\n        edit={GuitarEdit}\r\n        icon={PostIcon}\r\n        options={{\r\n          label: \"Гитары\",\r\n        }}\r\n      />\r\n      <Resource\r\n        name='guitartypes'\r\n        list={GuitarTypeList}\r\n        edit={GuitarTypeEdit}\r\n        create={GuitarTypeCreate}\r\n        icon={PostIcon}\r\n        options={{\r\n          label: \"Типы гитар\",\r\n        }}\r\n      />\r\n      <Resource\r\n        name='orders'\r\n        list={OrderList}\r\n        show={OrderShow}\r\n        icon={PostIcon}\r\n        options={{\r\n          label: \"Заказы\",\r\n        }}\r\n      />\r\n    </Admin>\r\n  );\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}